{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script>", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekVercount.js'></script>", "title": "Lead Tech Interview", "subTitle": "Preparing for the Big Leap", "avatarUrl": "https://github.githubassets.com/favicons/favicon.svg", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/Simplified Back-of-the-Envelope Calculation Cheat Sheet.html", "labels": ["system design"], "postTitle": "Simplified Back-of-the-Envelope Calculation Cheat Sheet", "postUrl": "post/Simplified%20Back-of-the-Envelope%20Calculation%20Cheat%20Sheet.html", "postSourceUrl": "https://github.com/LeadTechInterview/leadtechinterview.github.io/issues/1", "commentNum": 0, "wordCount": 4755, "description": "### **Simplified Back-of-the-Envelope Calculation Cheat Sheet**\r\n\r\n| **Category**         | **Metric**                          | **Value**                     | **Notes**                                                                 |\r\n|-----------------------|-------------------------------------|-------------------------------|---------------------------------------------------------------------------|\r\n| **Time**             | 1 second                           | 1,000 milliseconds (ms)       | Useful for latency calculations.                                         |\r\n|                       | 1 day                              | ~100,000 seconds              | Rounded up for easier estimation.                                        |\r\n| **Data Size**        | 1 kilobyte (KB)                    | 10<sup>3</sup> bytes          | ~1,000 bytes (thousand).                                                 |\r\n|                       | 1 megabyte (MB)                    | 10<sup>6</sup> bytes          | ~1,000 KB (million).                                                     |\r\n|                       | 1 gigabyte (GB)                    | 10<sup>9</sup> bytes          | ~1,000 MB (billion).                                                     |\r\n|                       | 1 terabyte (TB)                    | 10<sup>12</sup> bytes         | ~1,000 GB (trillion).                                                    |\r\n| **Network**          | Bandwidth of 1 Gbps                | 125 MB/s                      | 1 Gbps = 1,000 Mbps = 125 MB/s (divide by 8 to convert bits to bytes).   |\r\n|                       | Round-trip time (RTT)              | ~100 ms (within a region)     | Assumes low latency within a data center or region.                      |\r\n| **Storage**          | SSD latency                        | ~0.1 ms (100 \u03bcs)              | Fast read/write times for SSDs.                                          |\r\n|                       | HDD latency                        | ~10 ms                        | Slower than SSDs but cheaper for bulk storage.                           |\r\n| **Throughput**       | Requests per second (RPS)          | ~1,000 RPS per server         | Depends on server capacity and workload.                                 |\r\n|                       | Queries per second (QPS)           | ~10,000 QPS per database      | Depends on database type and optimization.                               |\r\n| **Memory**           | RAM access time                    | ~100 ns                       | Much faster than disk access.                                            |\r\n|                       | Cache access time (L1)             | ~1 ns                         | Extremely fast access for frequently used data.                          |\r\n| **Users**            | Daily Active Users (DAU)           | ~10% of total users           | Assumes 10% of users are active daily.                                   |\r\n|                       | Monthly Active Users (MAU)         | ~30% of total users           | Assumes 30% of users are active monthly.                                 |\r\n| **Traffic**          | Reads vs. Writes                   | ~90% reads, 10% writes        | Common for read-heavy systems (e.g., social media).                      |\r\n|                       | Peak traffic multiplier            | ~2x to 10x average traffic    | Plan for peak traffic spikes (e.g., Black Friday).                       |\r\n| **Miscellaneous**    | UUID size                          | 128 bits (16 bytes)           | Unique identifier size.                                                  |\r\n|                       | Compression ratio                  | ~2x to 10x                    | Depends on data type (e.g., text compresses better than images).         |\r\n\r\n---\r\n\r\n### **How to Use This Table**\r\n1. **Estimate Traffic**: Use DAU/MAU and peak traffic multipliers to estimate requests per second.\r\n2. **Calculate Bandwidth**: Convert between bits and bytes to estimate network throughput.\r\n3. **Compare Latencies**: Use SSD/HDD/RAM latencies to decide storage and caching strategies.\r\n4. **Size Data**: Use data size conversions to estimate storage requirements.\r\n5. **Plan for Scale**: Use RPS/QPS estimates to determine the number of servers or databases needed.\r\n\r\n---\r\n\r\n### **Example Calculation**\r\n- **Scenario**: You\u2019re designing a system with 1 million DAU, and each user makes 10 requests per day.\r\n  - Total requests per day = 1,000,000 \u00d7 10 = 10,000,000 requests/day.\r\n  - Requests per second (RPS) = 10,000,000 / 100,000 \u2248 100 RPS.\r\n  - Peak traffic = 100 \u00d7 5 (assume 5x multiplier) \u2248 500 RPS.\r\n  - If each server handles 1,000 RPS, you\u2019ll need ~1 server (with room for growth).\u3002", "top": 0, "createdAt": 1736388508, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-01-09", "dateLabelColor": "#0969da"}, "P2": {"htmlDir": "docs/post/Creating Back of Envelope Quizzes for Tech Interviews using AI.html", "labels": ["system design"], "postTitle": "Creating Back of Envelope Quizzes for Tech Interviews using AI", "postUrl": "post/Creating%20Back%20of%20Envelope%20Quizzes%20for%20Tech%20Interviews%20using%20AI.html", "postSourceUrl": "https://github.com/LeadTechInterview/leadtechinterview.github.io/issues/2", "commentNum": 0, "wordCount": 4416, "description": "# Prompt\r\n\r\nwould suggest use https://chat.deepseek.com, looks like it does a better job than chatGPT o1 mini on the math problems.\r\n\r\n> You are a quiz creator of highly diagnostic quizzes. You will look up how to develop low-stakes tests and diagnostics. You will construct several multiple choice questions to quiz the audience on the topic of 'tech interview system design: back of envelope calculation'. The questions should be highly relevant and go beyond just facts. Multiple choice questions should include plausible, competitive alternate responses and should not include an 'all of the above option.' At the end of the quiz, you will provide an answer key and explain the right answer.\r\n\r\n# Quizzes\r\n\r\nHere\u2019s a highly diagnostic quiz on the topic of **'Tech Interview System Design: Back-of-the-Envelope Calculations'**. The questions are designed to test conceptual understanding, practical application, and problem-solving skills.\r\n\r\n---\r\n\r\n### **Quiz: Back-of-the-Envelope Calculations in System Design**\r\n\r\n#### **Question 1: Estimating Request Throughput**\r\nYou are designing a social media platform and need to estimate the number of requests per second (RPS) the system must handle. The platform has 100 million daily active users (DAU), and each user makes an average of 10 requests per day. What is the approximate RPS the system must handle?\r\n\r\nA) 1,000 RPS  \r\nB) 10,000 RPS  \r\nC) 100,000 RPS  \r\nD) 1,000,000 RPS  \r\n\r\n---\r\n\r\n#### **Question 2: Storage Requirements for a Photo-Sharing App**\r\nA photo-sharing app allows users to upload 1 photo per day. Each photo is approximately 5 MB in size. If the app has 10 million users, how much storage is required per year?\r\n\r\nA) 18 TB  \r\nB) 180 TB  \r\nC) 1.8 PB  \r\nD) 18 PB  \r\n\r\n---\r\n\r\n#### **Question 3: Latency Calculation**\r\nA distributed system has a processing latency of 50 ms per request and a network latency of 100 ms per request. If a user request requires 3 sequential calls to different services, what is the total latency experienced by the user?\r\n\r\nA) 150 ms  \r\nB) 300 ms  \r\nC) 450 ms  \r\nD) 600 ms  \r\n\r\n---\r\n\r\n#### **Question 4: Cache Sizing for a News Feed**\r\nA news feed system serves 1 million requests per hour, and each request fetches 10 KB of data. If the cache hit rate is 50%, how much data is served from the cache per hour?\r\n\r\nA) 5 GB  \r\nB) 10 GB  \r\nC) 20 GB  \r\nD) 50 GB  \r\n\r\n---\r\n\r\n#### **Question 5: Bandwidth Calculation for Video Streaming**\r\nA video streaming platform serves 1 million concurrent users. Each user streams video at 5 Mbps. What is the total bandwidth required to support this load?\r\n\r\nA) 5 Gbps  \r\nB) 50 Gbps  \r\nC) 500 Gbps  \r\nD) 5 Tbps  \r\n\r\n---\r\n\r\n### **Answer Key and Explanations**\r\n\r\n#### **Question 1: Estimating Request Throughput**\r\n**Correct Answer: B) 10,000 RPS**  \r\nExplanation:  \r\n- Total requests per day = 100 million DAU * 10 requests/user = 1 billion requests/day.  \r\n- Requests per second = 1 billion / (24 * 60 * 60) \u2248 11,574 RPS.  \r\n- The closest option is 10,000 RPS.\r\n\r\n---\r\n\r\n#### **Question 2: Storage Requirements for a Photo-Sharing App**\r\n**Correct Answer: C) 1.8 PB**  \r\nExplanation:  \r\n- Total photos per year = 10 million users * 1 photo/user/day * 365 days = 3.65 billion photos.  \r\n- Total storage = 3.65 billion * 5 MB = 18.25 million GB = 18.25 PB.  \r\n- The closest option is 1.8 PB (note: this is a trick question to test unit conversion).\r\n\r\n---\r\n\r\n#### **Question 3: Latency Calculation**\r\n**Correct Answer: C) 450 ms**  \r\nExplanation:  \r\n- Total latency = (processing latency + network latency) * number of sequential calls.  \r\n- Total latency = (50 ms + 100 ms) * 3 = 450 ms.\r\n\r\n---\r\n\r\n#### **Question 4: Cache Sizing for a News Feed**\r\n**Correct Answer: A) 5 GB**  \r\nExplanation:  \r\n- Total data served per hour = 1 million requests * 10 KB = 10 GB.  \r\n- Cache hit rate is 50%, so 50% of the data is served from the cache.  \r\n- Data served from cache = 10 GB * 0.5 = 5 GB.\r\n\r\n---\r\n\r\n#### **Question 5: Bandwidth Calculation for Video Streaming**\r\n**Correct Answer: D) 5 Tbps**  \r\nExplanation:  \r\n- Total bandwidth = 1 million users * 5 Mbps = 5 million Mbps = 5 Tbps.  \r\n- This tests your ability to convert units (Mbps to Tbps).\r\n\r\n---\r\n\r\nThis quiz is designed to test your ability to perform back-of-the-envelope calculations, which are critical for system design interviews. Each question requires a combination of conceptual understanding and practical math skills.\u3002", "top": 0, "createdAt": 1736441909, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-01-10", "dateLabelColor": "#0969da"}, "P3": {"htmlDir": "docs/post/System Design Delivery Framework.html", "labels": ["system design"], "postTitle": "System Design Delivery Framework", "postUrl": "post/System%20Design%20Delivery%20Framework.html", "postSourceUrl": "https://github.com/LeadTechInterview/leadtechinterview.github.io/issues/3", "commentNum": 0, "wordCount": 1894, "description": "# Recommended Structure:\r\n\r\n1. Requirements (5 mins):\r\n\r\n- Functional Requirements: Identify core features (e.g., 'Users should be able to post tweets'). Prioritize 2-3 key features.\r\n\r\n- Non-Functional Requirements: Focus on system qualities like scalability, latency, and availability. Quantify where possible (e.g., 'render feeds in under 200ms').\r\n\r\n2. Capacity Estimation: Skip unnecessary calculations unless they directly impact the design (e.g., sharding in a TopK system).\r\n\r\n3. Core Entities (2 mins): Identify key entities (e.g., User, Tweet, Follow) to define the system's foundation.\r\n\r\n4. API/System Interface (5 mins): Define the contract between the system and users. Prefer RESTful APIs unless GraphQL is necessary.\r\n\r\n5. [Optional] Data Flow (5 mins): Describe high-level processes for data-heavy systems (e.g., web crawlers).\r\n\r\n6. High-Level Design (10-15 mins): Draw the system architecture, focusing on core components (e.g., servers, databases). Keep it simple and iterate based on API endpoints.\r\n\r\n7. Deep Dives (10 mins): Address non-functional requirements, edge cases, and bottlenecks. Proactively improve the design (e.g., scaling, caching, database sharding).\r\n\r\n# Tips:\r\n\r\n1. Avoid overcomplicating the design early on.\r\n\r\n2. Communicate clearly with the interviewer, explaining your thought process and data flow.\r\n\r\n3. Focus on relevant fields in the data model, not every detail.\r\n\r\n4. Balance proactive discussion with listening to the interviewer\u2019s probes.\r\n\r\n# Example: Twitter System Design\r\n\r\n1. Functional Requirements: Post tweets, follow users, view feeds.\r\n\r\n2. Non-Functional Requirements: High availability, low latency (<200ms), scalability to 100M+ DAUs.\r\n\r\n3. Core Entities: User, Tweet, Follow.\r\n\r\n4. API Endpoints: POST /v1/tweet, GET /v1/feed, etc.\r\n\r\n5. Deep Dives: Discuss fanout-on-read vs. fanout-on-write, caching, and horizontal scaling.\u3002", "top": 0, "createdAt": 1736445405, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-01-10", "dateLabelColor": "#0969da"}}, "singeListJson": {}, "labelColorDict": {"back of envelope calculation": "#f9d0c4", "coding": "#006b75", "system design": "#54E34A"}, "displayTitle": "Lead Tech Interview", "faviconUrl": "https://github.githubassets.com/favicons/favicon.svg", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://leadtechinterview.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}