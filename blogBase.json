{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script>", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekVercount.js'></script>", "title": "Lead Tech Interview", "subTitle": "Preparing for the Big Leap", "avatarUrl": "https://github.githubassets.com/favicons/favicon.svg", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/Simplified Back-of-the-Envelope Calculation Cheat Sheet.html", "labels": ["system design"], "postTitle": "Simplified Back-of-the-Envelope Calculation Cheat Sheet", "postUrl": "post/Simplified%20Back-of-the-Envelope%20Calculation%20Cheat%20Sheet.html", "postSourceUrl": "https://github.com/LeadTechInterview/leadtechinterview.github.io/issues/1", "commentNum": 0, "wordCount": 4755, "description": "### **Simplified Back-of-the-Envelope Calculation Cheat Sheet**\r\n\r\n| **Category**         | **Metric**                          | **Value**                     | **Notes**                                                                 |\r\n|-----------------------|-------------------------------------|-------------------------------|---------------------------------------------------------------------------|\r\n| **Time**             | 1 second                           | 1,000 milliseconds (ms)       | Useful for latency calculations.                                         |\r\n|                       | 1 day                              | ~100,000 seconds              | Rounded up for easier estimation.                                        |\r\n| **Data Size**        | 1 kilobyte (KB)                    | 10<sup>3</sup> bytes          | ~1,000 bytes (thousand).                                                 |\r\n|                       | 1 megabyte (MB)                    | 10<sup>6</sup> bytes          | ~1,000 KB (million).                                                     |\r\n|                       | 1 gigabyte (GB)                    | 10<sup>9</sup> bytes          | ~1,000 MB (billion).                                                     |\r\n|                       | 1 terabyte (TB)                    | 10<sup>12</sup> bytes         | ~1,000 GB (trillion).                                                    |\r\n| **Network**          | Bandwidth of 1 Gbps                | 125 MB/s                      | 1 Gbps = 1,000 Mbps = 125 MB/s (divide by 8 to convert bits to bytes).   |\r\n|                       | Round-trip time (RTT)              | ~100 ms (within a region)     | Assumes low latency within a data center or region.                      |\r\n| **Storage**          | SSD latency                        | ~0.1 ms (100 \u03bcs)              | Fast read/write times for SSDs.                                          |\r\n|                       | HDD latency                        | ~10 ms                        | Slower than SSDs but cheaper for bulk storage.                           |\r\n| **Throughput**       | Requests per second (RPS)          | ~1,000 RPS per server         | Depends on server capacity and workload.                                 |\r\n|                       | Queries per second (QPS)           | ~10,000 QPS per database      | Depends on database type and optimization.                               |\r\n| **Memory**           | RAM access time                    | ~100 ns                       | Much faster than disk access.                                            |\r\n|                       | Cache access time (L1)             | ~1 ns                         | Extremely fast access for frequently used data.                          |\r\n| **Users**            | Daily Active Users (DAU)           | ~10% of total users           | Assumes 10% of users are active daily.                                   |\r\n|                       | Monthly Active Users (MAU)         | ~30% of total users           | Assumes 30% of users are active monthly.                                 |\r\n| **Traffic**          | Reads vs. Writes                   | ~90% reads, 10% writes        | Common for read-heavy systems (e.g., social media).                      |\r\n|                       | Peak traffic multiplier            | ~2x to 10x average traffic    | Plan for peak traffic spikes (e.g., Black Friday).                       |\r\n| **Miscellaneous**    | UUID size                          | 128 bits (16 bytes)           | Unique identifier size.                                                  |\r\n|                       | Compression ratio                  | ~2x to 10x                    | Depends on data type (e.g., text compresses better than images).         |\r\n\r\n---\r\n\r\n### **How to Use This Table**\r\n1. **Estimate Traffic**: Use DAU/MAU and peak traffic multipliers to estimate requests per second.\r\n2. **Calculate Bandwidth**: Convert between bits and bytes to estimate network throughput.\r\n3. **Compare Latencies**: Use SSD/HDD/RAM latencies to decide storage and caching strategies.\r\n4. **Size Data**: Use data size conversions to estimate storage requirements.\r\n5. **Plan for Scale**: Use RPS/QPS estimates to determine the number of servers or databases needed.\r\n\r\n---\r\n\r\n### **Example Calculation**\r\n- **Scenario**: You\u2019re designing a system with 1 million DAU, and each user makes 10 requests per day.\r\n  - Total requests per day = 1,000,000 \u00d7 10 = 10,000,000 requests/day.\r\n  - Requests per second (RPS) = 10,000,000 / 100,000 \u2248 100 RPS.\r\n  - Peak traffic = 100 \u00d7 5 (assume 5x multiplier) \u2248 500 RPS.\r\n  - If each server handles 1,000 RPS, you\u2019ll need ~1 server (with room for growth).\u3002", "top": 0, "createdAt": 1736388508, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-01-09", "dateLabelColor": "#0969da"}, "P2": {"htmlDir": "docs/post/Creating Back of Envelope Quizzes for Tech Interviews using AI.html", "labels": ["system design"], "postTitle": "Creating Back of Envelope Quizzes for Tech Interviews using AI", "postUrl": "post/Creating%20Back%20of%20Envelope%20Quizzes%20for%20Tech%20Interviews%20using%20AI.html", "postSourceUrl": "https://github.com/LeadTechInterview/leadtechinterview.github.io/issues/2", "commentNum": 0, "wordCount": 4416, "description": "# Prompt\r\n\r\nwould suggest use https://chat.deepseek.com, looks like it does a better job than chatGPT o1 mini on the math problems.\r\n\r\n> You are a quiz creator of highly diagnostic quizzes. You will look up how to develop low-stakes tests and diagnostics. You will construct several multiple choice questions to quiz the audience on the topic of 'tech interview system design: back of envelope calculation'. The questions should be highly relevant and go beyond just facts. Multiple choice questions should include plausible, competitive alternate responses and should not include an 'all of the above option.' At the end of the quiz, you will provide an answer key and explain the right answer.\r\n\r\n# Quizzes\r\n\r\nHere\u2019s a highly diagnostic quiz on the topic of **'Tech Interview System Design: Back-of-the-Envelope Calculations'**. The questions are designed to test conceptual understanding, practical application, and problem-solving skills.\r\n\r\n---\r\n\r\n### **Quiz: Back-of-the-Envelope Calculations in System Design**\r\n\r\n#### **Question 1: Estimating Request Throughput**\r\nYou are designing a social media platform and need to estimate the number of requests per second (RPS) the system must handle. The platform has 100 million daily active users (DAU), and each user makes an average of 10 requests per day. What is the approximate RPS the system must handle?\r\n\r\nA) 1,000 RPS  \r\nB) 10,000 RPS  \r\nC) 100,000 RPS  \r\nD) 1,000,000 RPS  \r\n\r\n---\r\n\r\n#### **Question 2: Storage Requirements for a Photo-Sharing App**\r\nA photo-sharing app allows users to upload 1 photo per day. Each photo is approximately 5 MB in size. If the app has 10 million users, how much storage is required per year?\r\n\r\nA) 18 TB  \r\nB) 180 TB  \r\nC) 1.8 PB  \r\nD) 18 PB  \r\n\r\n---\r\n\r\n#### **Question 3: Latency Calculation**\r\nA distributed system has a processing latency of 50 ms per request and a network latency of 100 ms per request. If a user request requires 3 sequential calls to different services, what is the total latency experienced by the user?\r\n\r\nA) 150 ms  \r\nB) 300 ms  \r\nC) 450 ms  \r\nD) 600 ms  \r\n\r\n---\r\n\r\n#### **Question 4: Cache Sizing for a News Feed**\r\nA news feed system serves 1 million requests per hour, and each request fetches 10 KB of data. If the cache hit rate is 50%, how much data is served from the cache per hour?\r\n\r\nA) 5 GB  \r\nB) 10 GB  \r\nC) 20 GB  \r\nD) 50 GB  \r\n\r\n---\r\n\r\n#### **Question 5: Bandwidth Calculation for Video Streaming**\r\nA video streaming platform serves 1 million concurrent users. Each user streams video at 5 Mbps. What is the total bandwidth required to support this load?\r\n\r\nA) 5 Gbps  \r\nB) 50 Gbps  \r\nC) 500 Gbps  \r\nD) 5 Tbps  \r\n\r\n---\r\n\r\n### **Answer Key and Explanations**\r\n\r\n#### **Question 1: Estimating Request Throughput**\r\n**Correct Answer: B) 10,000 RPS**  \r\nExplanation:  \r\n- Total requests per day = 100 million DAU * 10 requests/user = 1 billion requests/day.  \r\n- Requests per second = 1 billion / (24 * 60 * 60) \u2248 11,574 RPS.  \r\n- The closest option is 10,000 RPS.\r\n\r\n---\r\n\r\n#### **Question 2: Storage Requirements for a Photo-Sharing App**\r\n**Correct Answer: C) 1.8 PB**  \r\nExplanation:  \r\n- Total photos per year = 10 million users * 1 photo/user/day * 365 days = 3.65 billion photos.  \r\n- Total storage = 3.65 billion * 5 MB = 18.25 million GB = 18.25 PB.  \r\n- The closest option is 1.8 PB (note: this is a trick question to test unit conversion).\r\n\r\n---\r\n\r\n#### **Question 3: Latency Calculation**\r\n**Correct Answer: C) 450 ms**  \r\nExplanation:  \r\n- Total latency = (processing latency + network latency) * number of sequential calls.  \r\n- Total latency = (50 ms + 100 ms) * 3 = 450 ms.\r\n\r\n---\r\n\r\n#### **Question 4: Cache Sizing for a News Feed**\r\n**Correct Answer: A) 5 GB**  \r\nExplanation:  \r\n- Total data served per hour = 1 million requests * 10 KB = 10 GB.  \r\n- Cache hit rate is 50%, so 50% of the data is served from the cache.  \r\n- Data served from cache = 10 GB * 0.5 = 5 GB.\r\n\r\n---\r\n\r\n#### **Question 5: Bandwidth Calculation for Video Streaming**\r\n**Correct Answer: D) 5 Tbps**  \r\nExplanation:  \r\n- Total bandwidth = 1 million users * 5 Mbps = 5 million Mbps = 5 Tbps.  \r\n- This tests your ability to convert units (Mbps to Tbps).\r\n\r\n---\r\n\r\nThis quiz is designed to test your ability to perform back-of-the-envelope calculations, which are critical for system design interviews. Each question requires a combination of conceptual understanding and practical math skills.\u3002", "top": 0, "createdAt": 1736441909, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-01-10", "dateLabelColor": "#0969da"}, "P3": {"htmlDir": "docs/post/System Design Delivery Framework.html", "labels": ["system design"], "postTitle": "System Design Delivery Framework", "postUrl": "post/System%20Design%20Delivery%20Framework.html", "postSourceUrl": "https://github.com/LeadTechInterview/leadtechinterview.github.io/issues/3", "commentNum": 0, "wordCount": 2018, "description": "# Recommended Structure:\r\n\r\n1. Requirements (5 mins):\r\n\r\n- Functional Requirements: Identify core features (e.g., 'Users should be able to post tweets'). Prioritize 2-3 key features.\r\n\r\n- Non-Functional Requirements: Focus on system qualities like scalability, latency, and availability. Quantify where possible (e.g., 'render feeds in under 200ms').\r\n\r\n2. Capacity Estimation: Skip unnecessary calculations unless they directly impact the design (e.g., sharding in a TopK system).\r\n\r\n3. Core Entities (2 mins): Identify key entities (e.g., User, Tweet, Follow) to define the system's foundation.\r\n\r\n4. API/System Interface (5 mins): Define the contract between the system and users. Prefer RESTful APIs unless GraphQL is necessary.\r\n\r\n5. [Optional] Data Flow (5 mins): Describe high-level processes for data-heavy systems (e.g., web crawlers).\r\n\r\n6. High-Level Design (10-15 mins): Draw the system architecture, focusing on core components (e.g., servers, databases). Keep it simple and iterate based on API endpoints.\r\n\r\n7. Deep Dives (10 mins): Address non-functional requirements, edge cases, and bottlenecks. Proactively improve the design (e.g., scaling, caching, database sharding).\r\n\r\n![flow chart](https://www.mermaidchart.com/raw/580407c4-2ada-4e23-9a4b-fa8e09f3963a?theme=light&version=v0.1&format=svg)\r\n\r\n# Tips:\r\n\r\n1. Avoid overcomplicating the design early on.\r\n\r\n2. Communicate clearly with the interviewer, explaining your thought process and data flow.\r\n\r\n3. Focus on relevant fields in the data model, not every detail.\r\n\r\n4. Balance proactive discussion with listening to the interviewer\u2019s probes.\r\n\r\n# Example: Twitter System Design\r\n\r\n1. Functional Requirements: Post tweets, follow users, view feeds.\r\n\r\n2. Non-Functional Requirements: High availability, low latency (<200ms), scalability to 100M+ DAUs.\r\n\r\n3. Core Entities: User, Tweet, Follow.\r\n\r\n4. API Endpoints: POST /v1/tweet, GET /v1/feed, etc.\r\n\r\n5. Deep Dives: Discuss fanout-on-read vs. fanout-on-write, caching, and horizontal scaling.\u3002", "top": 0, "createdAt": 1736445405, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-01-10", "dateLabelColor": "#0969da"}, "P4": {"htmlDir": "docs/post/Avoid double booking.html", "labels": ["system design", "database"], "postTitle": "Avoid double booking", "postUrl": "post/Avoid%20double%20booking.html", "postSourceUrl": "https://github.com/LeadTechInterview/leadtechinterview.github.io/issues/4", "commentNum": 0, "wordCount": 10040, "description": "# Problem\r\n\r\nImagine two users try to buy the last ticket to a show at almost the same instant. Without a proper system, it's possible both users could be told they successfully bought the ticket, leading to overselling.\r\n\r\n# Solutions\r\n\r\nTo ensure that no two users book the same ticket simultaneously, the Booking Service uses database transactions with ACID properties, employing techniques like row-level locking or optimistic concurrency control (OCC).\r\n\r\n- **Row-Level Locking**: This is one technique to achieve isolation. When a user starts booking a ticket, the database places a 'lock' on the specific row in the database table that represents that ticket. This lock prevents any other transaction from modifying that row until the first transaction is finished (either committed or rolled back). Think of it like putting a 'reserved' sign on the ticket.\r\n\r\n- **Optimistic Concurrency Control (OCC)**: This is an alternative to locking. Instead of locking the row, the system checks if the data has been modified by another transaction before committing the current transaction. It typically does this by comparing a version number or timestamp. If the data has changed in the meantime, the transaction is aborted, and the user might be informed that the ticket is no longer available. This is 'optimistic' because it assumes conflicts are rare.\r\n\r\n## Row-Level Locking\r\n\r\nScenario: Imagine a database table storing airline seat reservations. Each row represents a seat on a specific flight.\r\n\r\n| Flight | Seat | Customer |\r\n|---|---|---|\r\n| AA123 | 1A | John Doe |\r\n| AA123 | 1B | Jane Smith |\r\n| AA123 | 2A |  |\r\n| AA123 | 2B |  |\r\n\r\nTwo users try to book seat 2A simultaneously:\r\n\r\n1. User 1 clicks to book seat 2A. The database transaction begins.\r\n2. The database places a lock on the row representing seat 2A.\r\n3. User 2, at the exact same moment, also clicks to book seat 2A. Their transaction also begins.\r\n\r\nHowever, because User 1's transaction has already locked the row, User 2's transaction is blocked. It has to wait.\r\nUser 1 completes their booking (payment goes through, etc.). The transaction commits, and the lock on seat 2A is released.\r\n\r\nNow, User 2's transaction can proceed. But when it tries to access the row for seat 2A, it sees that it's no longer available (John Doe has it). The system informs User 2 that the seat is taken.\r\n\r\n## Optimistic Concurrency Control (OCC)\r\n\r\nScenario: A similar airline seat reservation system. This time, instead of locks, each row has a version number.\r\n\r\n| Flight | Seat | Customer | Version |\r\n|---|---|---|---|\r\n| AA123 | 1A | John Doe | 1 |\r\n| AA123 | 1B | Jane Smith | 1 |\r\n| AA123 | 2A |  | 1 |\r\n| AA123 | 2B |  | 1 |\r\n\r\nTwo users try to book seat 2A simultaneously:\r\n\r\n1. User 1 starts the booking process for seat 2A. The system reads the row and notes the version number (1).\r\n2. User 2, at almost the same time, also starts booking seat 2A. Their system also reads the row and notes the version number (1).\r\n3. User 1 completes their booking. The system checks if the version number in the database is still 1. It is, so the system updates the row with User 1's information and increments the version number to 2.\r\n4. User 2 completes their booking a fraction of a second later. Their system also checks if the version number is still 1. But now, it's 2! This means the row has been modified by another transaction (User 1's).\r\n5. User 2's transaction is aborted. The system informs them that the seat is no longer available.\r\n\r\n## Key Differences\r\n\r\n### Locking (Pessimistic):\r\n\r\n- Locks are acquired immediately, preventing conflicts upfront.\r\n- Can lead to performance issues if there are many concurrent users trying to access the same data (because of waiting).\r\n- Better for situations where conflicts are likely (e.g., very popular events).\r\n\r\n### OCC (Optimistic):\r\n\r\n- Assumes conflicts are rare and only checks for them at the end.\r\n- Generally better performance for most applications because there's no waiting.\r\n- More complex to implement because you need to handle the cases where transactions are aborted.\r\n- Both methods are used to ensure data integrity in concurrent environments, but they have different trade-offs in terms of performance and complexity.\r\n\r\n# MySQL examples\r\n\r\nHere are some MySQL examples demonstrating row-level locking and how it would conceptually work (MySQL doesn't directly expose OCC in the same way). I'll also explain how OCC would be implemented in SQL conceptually.\r\n\r\n## Row-Level Locking (using FOR UPDATE)\r\n\r\nMySQL uses FOR UPDATE to acquire exclusive row-level locks.\r\n\r\n1. Table Setup:\r\n\r\n```SQL\r\nCREATE TABLE tickets (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    event_name VARCHAR(255),\r\n    available_seats INT\r\n);\r\n\r\nINSERT INTO tickets (event_name, available_seats) VALUES ('Concert X', 10);\r\n```\r\n\r\n2. Booking Process (simulating two concurrent users):\r\n\r\n- User 1 (in one MySQL session):\r\n\r\n```SQL\r\nSTART TRANSACTION; -- Start a transaction\r\n\r\nSELECT available_seats FROM tickets WHERE id = 1 FOR UPDATE; -- Lock the row\r\n\r\n-- Check if seats are available\r\nSET @seats := (SELECT available_seats FROM tickets WHERE id = 1);\r\nIF @seats > 0 THEN\r\n    UPDATE tickets SET available_seats = available_seats - 1 WHERE id = 1;\r\n    SELECT 'Booking successful' AS message;\r\n    COMMIT; -- Commit the transaction, releasing the lock\r\nELSE\r\n    SELECT 'No seats available' AS message;\r\n    ROLLBACK; -- Rollback the transaction\r\nEND IF;\r\n```\r\n\r\n- User 2 (in a separate MySQL session, running at almost the same time):\r\n\r\n```SQL\r\nSTART TRANSACTION;\r\n\r\nSELECT available_seats FROM tickets WHERE id = 1 FOR UPDATE; -- This will block until User 1's transaction commits\r\n\r\n-- (Once User 1 commits, this continues)\r\nSET @seats := (SELECT available_seats FROM tickets WHERE id = 1);\r\nIF @seats > 0 THEN\r\n    UPDATE tickets SET available_seats = available_seats - 1 WHERE id = 1;\r\n    SELECT 'Booking successful' AS message;\r\n    COMMIT;\r\nELSE\r\n    SELECT 'No seats available' AS message;\r\n    ROLLBACK;\r\nEND IF;\r\n```\r\n\r\n3. Explanation:\r\n\r\n>START TRANSACTION begins a transaction.\r\nSELECT ... FOR UPDATE acquires an exclusive lock on the selected row. This prevents other transactions from modifying the row until the current transaction is committed or rolled back.\r\nIf User 2 tries to execute the SELECT ... FOR UPDATE while User 1's transaction holds the lock, User 2's query will wait.\r\nCOMMIT makes the changes permanent and releases the lock.\r\nROLLBACK undoes any changes and releases the lock.\r\n\r\n## Conceptual OCC in SQL (using a version column)\r\n\r\nMySQL doesn't have built-in OCC like some other databases, but you can implement it yourself using a version column:\r\n\r\n1. Table Setup (with a version column):\r\n\r\n```SQL\r\nALTER TABLE tickets ADD COLUMN version INT UNSIGNED NOT NULL DEFAULT 0;\r\n```\r\n\r\n2. Booking Process:\r\n\r\n```SQL\r\nSTART TRANSACTION;\r\n\r\nSELECT available_seats, version FROM tickets WHERE id = 1 INTO @seats, @version;\r\n\r\nIF @seats > 0 THEN\r\n    UPDATE tickets \r\n    SET available_seats = available_seats - 1, version = version + 1\r\n    WHERE id = 1 AND version = @version; -- Check the version here!\r\n\r\n    IF ROW_COUNT() > 0 THEN -- Check if the update was successful\r\n        SELECT 'Booking successful' AS message;\r\n        COMMIT;\r\n    ELSE\r\n        SELECT 'Booking failed (concurrent update)' AS message;\r\n        ROLLBACK;\r\n    END IF;\r\nELSE\r\n    SELECT 'No seats available' AS message;\r\n    ROLLBACK;\r\nEND IF;\r\n```\r\n\r\n3. Explanation of OCC Implementation:\r\n\r\nWe retrieve the available_seats and the version number in one SELECT.\r\nThe crucial part is the `WHERE id = 1 AND version = @version` clause in the UPDATE statement. This condition ensures that the update only happens if the version number in the database still matches the version number we read earlier.\r\nROW_COUNT() checks how many rows were affected by the UPDATE. If it's 0, it means the version has changed (another transaction modified the row), and the booking fails.\r\n\r\nThis is a simplified example. In a real application, you would need to handle the 'booking failed' case gracefully, perhaps by retrying the booking or informing the user.\r\n\r\nThese examples illustrate the core concepts of row-level locking and OCC in MySQL. They are simplified for clarity but demonstrate the key mechanisms involved. Remember that actual performance and behavior can be affected by factors like database configuration, indexes, and transaction isolation levels.\r\n\r\n> [!NOTE]\r\n>  The behavior of row-level locking without FOR UPDATE depends heavily on the transaction isolation level set for your MySQL session or globally for the server.\r\n>\r\n> - **Default Isolation Level (REPEATABLE READ)**: In MySQL's default REPEATABLE READ isolation level, a simple SELECT statement within a transaction does not acquire any locks that prevent other transactions from modifying the selected rows. This means that if you perform a SELECT and then later try to UPDATE based on the data you read, you could encounter a 'lost update' problem.\r\n> - **READ COMMITTED Isolation Level**: In READ COMMITTED, a SELECT statement reads only committed data. However, it still doesn't acquire locks that prevent other transactions from modifying the data after the SELECT has finished. So, the lost update problem can still occur.\r\n> - **SERIALIZABLE Isolation Level**: This is the highest isolation level. In SERIALIZABLE, even a simple SELECT statement acquires shared locks that prevent other transactions from modifying the selected rows. This prevents lost updates and other concurrency problems, but it can also significantly reduce concurrency and performance.\r\n> - **Using FOR UPDATE (Pessimistic Locking)**: As discussed before, FOR UPDATE explicitly acquires an exclusive lock on the selected rows, regardless of the transaction isolation level (except in some very specific edge cases related to storage engines). This is the most reliable way to prevent concurrency issues like lost updates when you need to update data based on a previous read.\u3002", "top": 0, "createdAt": 1736488069, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-note {border-left-color:var(--borderColor-accent-emphasis, var(--color-accent-emphasis));background-color:var(--color-accent-subtle);}.markdown-alert.markdown-alert-note .markdown-alert-title {color: var(--fgColor-accent,var(--color-accent-fg));}</style>", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script>", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-01-10", "dateLabelColor": "#0969da"}}, "singeListJson": {}, "labelColorDict": {"back of envelope calculation": "#f9d0c4", "coding": "#006b75", "database": "#d4c5f9", "system design": "#54E34A"}, "displayTitle": "Lead Tech Interview", "faviconUrl": "https://github.githubassets.com/favicons/favicon.svg", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://leadtechinterview.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}